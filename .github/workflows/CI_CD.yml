name: CI/CD

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  Linter:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository contents
        uses: actions/checkout@v2
      - name: Install ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.7.2
          bundler-cache: true
      - name: Install dependencies
        run: bundle install
      - name: RuboCop
        run: bundle exec rubocop

  # Label of the runner job
  CI:
    # You must use a Linux environment when using service containers or container jobs
    runs-on: ubuntu-latest

    # https://docs.github.com/en/free-pro-team@latest/actions/guides/creating-postgresql-service-containers
    # Service containers to run with `CI`
    services:
      postgres:
      # Docker Hub image
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_DB: test
          # should not be empty
          # https://stackoverflow.com/questions/60618118#answer-60618750
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
        # Maps tcp port 5432 on service container to the host
        ports: ["5432:5432"]

    steps:
      # Downloads a copy of the code in your repository before running CI tests
      - name: Checkout repository contents
        uses: actions/checkout@v2
      
      - name: Install Ruby
        # The setup-ruby action will automatically install bundler for you
        # https://docs.github.com/en/free-pro-team@latest/actions/guides/building-and-testing-ruby#installing-dependencies-with-bundler
        uses: ruby/setup-ruby@v1
        with: 
          ruby-version: 2.7.2
          # https://docs.github.com/en/free-pro-team@latest/actions/guides/building-and-testing-ruby#caching-dependencies
          bundler-cache: true

      - name: Install yarn packages
        run: yarn install --check-files

      - name: Run tests in PostgreSQL database
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test
          RAILS_ENV: test
        # Don't run RSpec with . https://olivierlacan.com/posts/a-tiny-little-dot/
        run: |
          cp config/database.ci.yml config/database.yml
          bundle exec rails db:setup
          bundle exec rspec spec/

  Deployment:
    needs: [CI, Linter] # assures that the job "CI" completed successful before this job is started
    runs-on: ubuntu-latest

    # The both deployment steps contain two safeguards.
    # github.event_name == 'push' assures that the pull requests, for which the CI should run too, are not deployed to Heroku
    # github.ref == 'refs/heads/<branch name>' assures that in the current step, only one of the branches is deployed. 
    #   This was made because the two different deployments (main and dev) each have their own Heroku-App.
    if: github.event_name == 'push' && (github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

        # https://github.com/marketplace/actions/deploy-to-heroku
      - uses: akhileshns/heroku-deploy@v3.6.8
        with:
          heroku_api_key: ${{secrets.HEROKU_API_TOKEN}}
          heroku_app_name: "connections-portal-dev" #Must be unique in Heroku
          heroku_email: "hpi.swt2+heroku@gmail.com"
        if: github.ref == 'refs/heads/dev'

        # https://github.com/marketplace/actions/deploy-to-heroku
      - uses: akhileshns/heroku-deploy@v3.6.8
        with:
          heroku_api_key: ${{secrets.HEROKU_API_TOKEN}}
          heroku_app_name: "connections-portal-main" #Must be unique in Heroku
          heroku_email: "hpi.swt2+heroku@gmail.com"
        if: github.ref == 'refs/heads/main'
